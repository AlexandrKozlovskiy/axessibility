
%% This is file `axessibility.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% axessibility.dtx 
%% 
%% This is a generated file.
%% 
%% Copyright (C) 2018, 2019  by
%% Anna Capietto, Sandro Coriasco, Boris Doubrov, Alexander Kozlovskiy, Tiziana Armano,
%% Nadir Murru, Alice Ruighi, Eugenia Taranto,
%% Dragan Ahmetovic, Cristian Bernareggi, Michele Berra.
%% 
%% This work consists of the main source file axessibility.dtx
%% and the derived files
%%    axessibility.ins, axessibility.sty, axessibility.pdf, README,
%%    axessibilityExampleGoldenMean.tex
%% 
%% The Current Maintainer of this work is
%%                Sandro Coriasco
%% 
%% This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 License
%% http://creativecommons.org/licenses/by-nc/4.0/
%% 



\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{axessibility}


%% 'tagpdf' or 'accsupp' option
\newif\iftagpdfopt

\DeclareOption{accsupp}{
  \tagpdfoptfalse
}

\DeclareOption{tagpdf}{
  \tagpdfopttrue
}
\ExecuteOptions{tagpdf}

\ProcessOptions\relax

\RequirePackage{amsmath}
\RequirePackage{amssymb}
\RequirePackage{xstring}

%%%
% to avoid errors in if constructs
%%%
\makeatletter
\long\def\@macronestedifalign{
\ifingather@
    \restorealignstate@
    \egroup
    \nonumber
    \ifnum0=`{\fi\iffalse}\fi
  \else
    $$%
  \fi
  }
  
\long\def\@macronestedifmultline{  
  \iftagsleft@ \@xp\lendmultline@ \else \@xp\rendmultline@ \fi
}
  
  
\makeatother

\iftagpdfopt
%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%
% tagpdf option code (default)   %
%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%
%\def\messaggio{option tagpdf} %debug

\RequirePackage{tagpdf}
\tagpdfsetup{tabsorder=structure,uncompress,activate-all,add-new-tag=Title/P,interwordspace=true}
\tagpdfifpdftexT
 {
\pdfcompresslevel=0
  %set language / can also be done with hyperref
  \pdfcatalog{/Lang (en-US)}
  \usepackage[T1]{fontenc}
  \input glyphtounicode
  \pdfgentounicode=1
 }
\tagpdfifluatexT
 {
  %set language / can also be done with hyperref
  \pdfextension catalog{/Lang (en-US)}
  \RequirePackage{fontspec}
  \RequirePackage{luacode}
  \newfontface\zerowidthfont{freeserif}
\directlua{
require("axessibility.lua")
}
}

\makeatletter

\newtoks\@mltext
\newtoks\@mltexttmp

%switch on expl3 syntaks for works with variables
\ExplSyntaxOn
%switch on or switch off $$ and $ replacement and replacement of empty lines if $$ or $ opened and if first argument of command is true. this command works only in luatex/lualatex
\newcommand{\doreplacement}[1]{
\sys_if_engine_luatex:TF{
\directlua{
replace_dls_and_double_dls(#1)
}}
{\PackageWarning{axessibility}{\detokenize{\doreplacement}~command~works~only~in~luatex/lualatex.}}
}
%variable,which shows,if we need in tagging of something,except document environment and formulas.
\bool_new:N{\g__autotagging_bool}
\bool_gset_true:N{\g__autotagging_bool}
\let\begin@document=\document
\let\end@document=\enddocument
\renewcommand{\document}{
\cs_undefine:N{\noAutotagging}\begin@document\tagstructbegin{tag=Document}
\bool_if:NTF{\g__autotagging_bool}{\startautotagging}{}
}
\renewcommand{\enddocument}{
%closing all open structures
\bool_if:NTF{\g__opened_par_bool}{\tagmcend}{}
\int_step_inline:nnn{2}{\seq_count:N \g__tag_struct_stack_seq}{\tagstructend}
\bool_gset_false:N\g__opened_par_bool
\end@document}
\newcommand{\CloseFormula}{\tagmcend
\bool_if:NTF{\g__opened_par_bool}{
%now we close structure to,because even in inline formulas we open structure tag.
\tagstructend}{
\tagstructend
}
}
%command,which switch off tagging of all,except formula. It should be call only before \begin{document}
\newcommand{\noAutotagging}{\bool_gset_false:N{\g__autotagging_bool}
\message{command~\detokenize{\noautotagging}~will~be~unaccessible~anymore}
\cs_undefine:N{\noAutotagging}
}
%variable,which show,if we have opened paragraph
\bool_new:N\g__opened_par_bool
\protected\def\startautotagging{
%variable,which shows,if we in some structure,eccept paragraph.
\bool_new:N\g__in_struct_bool
%variable,which show,if we in some environment,o no.
\str_new:N{\g__env_str}
%variable,which show level of list.
\int_gzero_new:N{\g__list_level_int}
%property with environments,before and after which we will execute 
\prop_set_from_keyval:Nn\g__env_prop{temp@env=false,equation=true,equation*=true,align=true,align*=true,flalign=true,flalign*=true,gather=true,gather*=true,multline=true,multline*=true,alignat=true,alignat*=true,xalignat=true,xalignat*=true,xxalignat=true,xxalignat*=true}
\cs_generate_variant:Nn \prop_item:Nn { NV }
%close and open mc or structure in environments
\prop_map_inline:cn{g__env_prop}{
\BeforeBeginEnvironment{##1}{\closeStructureIfNeed{##2}\bool_gset_true:N\g__in_struct_bool\str_gset:Nn{\g__env_str}{##1}}
\AfterEndEnvironment{##1}{\bool_gset_false:N\g__in_struct_bool\openStructureIfNeed{##2}}}
\protected\def\openStructureIfNeed##1{
\bool_if:NTF{\g__in_struct_bool}{}{
\str_case:nnF {##1}{
{true}
{\bool_gset_true:N{\g__opened_par_bool}\tagstructbegin{tag=P}}
{1}
{\bool_gset_true:N\g__opened_par_bool\tagstructbegin{tag=P}}
}{}
\tagmcbegin{tag=P}
\str_gclear:N{\g__env_str}
}}
\protected\def\closeStructureIfNeed##1{
\bool_if:NTF{\g__opened_par_bool}{
\tagmcend
\str_case:nnF {##1}{
{true}
{\bool_gset_false:N\g__opened_par_bool\tagstructend
}
{1}
{\bool_gset_false:N\g__opened_par_bool\tagstructend
}
}
{}
}
{
}
}
\protected\def\autoTaggingOfPar{
%\message{the_size_of_stack_of_structure_elements_is_\seq_count:N \g__tag_struct_stack_seq}
\bool_if:NTF{\g__in_struct_bool}{}{
\closeStructureIfNeed{true}
\openStructureIfNeed{true}
}
}
\everypar{\autoTaggingOfPar}
%commands for sectioning
%ddictionary for sectioning
\prop_new:N {\g_sections_prop}
\prop_gput:Nnn{\g_sections_prop}{maketitle}{Title}
\prop_gput:Nnn{\g_sections_prop}{chapter}{H1}
\prop_gput:Nnn{\g_sections_prop}{section}{H2}
\prop_gput:Nnn{\g_sections_prop}{subsection}{H3}
\prop_gput:Nnn{\g_sections_prop}{subsubsection}{H4}
\prop_gput:Nnn{\g_sections_prop}{paragraph}{H5}
\prop_gput:Nnn{\g_sections_prop}{subparagraph}{H6}
\cs_new_protected:Nn \g__iterate:nn
 {
  \cs_if_exist:cT { ##1 }
   {
    \cs_set_eq:cc { orig@##1 } { ##1 }
    \cs_gset_protected_nopar:cpn { ##1 } ####1
     {
\bool_gset_true:N\g__in_struct_bool
\closeStructureIfNeed{true}
%\message{the_size_of_stack_of_structure_elements_before_opening_of_structure_is_\seq_count:N \g__tag_struct_stack_seq}     
	 \tagstructbegin{tag=##2}
            \tagmcbegin{tag=##2}
      \use:c { orig@##1 } { ####1 }
      \tagmcend
      \tagstructend
\bool_gset_false:N{\g__in_struct_bool}
\bool_gset_false:N\g__opened_par_bool
\everypar{\autoTaggingOfPar}
     }
   }
 }
\prop_map_function:NN \g_sections_prop \g__iterate:nn
%\renewcommand{\maketitle}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=Title}\tagmcbegin{tag=Title}\old@maketitle{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}
%\let\old@maketitle=\maketitle
%\let\old@chapter=\chapter
%\let\old@section=\section
%\let\old@subsection=\subsection
%\let\old@subsubsection=\subsubsection
%\let\old@paragraph=\paragraph
%\let\old@subparagraph=\subparagraph
%\renewcommand{\maketitle}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=Title}\tagmcbegin{tag=Title}\old@maketitle{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}
%\ifdef{\chapter}{
%\renewcommand{\chapter}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=H1}\tagmcbegin{tag=H1}\old@chapter{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}}
%\renewcommand{\section}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=H2}\tagmcbegin{tag=H2}\old@section{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}
%\renewcommand{\subsection}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=H3}\tagmcbegin{tag=H3}\old@subsection{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}
%\renewcommand{\subsubsection}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=H4}\tagmcbegin{tag=H4}\old@subsubsection{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}
%\renewcommand{\paragraph}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=H5}\tagmcbegin{tag=H5}\old@paragraph{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}
%\renewcommand{\paragraph}[1]{\closeStructureIfNeed{true}\tagstructbegin{tag=H6}\tagmcbegin{tag=H6}\old@subparagraph{##1}\tagmcend\tagstructend\everypar{\autoTaggingOfPar}}

%commands for tagging of lists.
\let\start@list=\list
\let\end@list=\endlist
\let\make@label=\makelabel
\renewcommand{\list}{
\int_case:NTF{\g__list_level_int}{{0}{\closeStructureIfNeed{true}}}{}
\int_gincr:N{\g__list_level_int}
\tagstructbegin{tag=L}
\start@list
}
\renewcommand{\endlist}{
\end@list
\int_gdecr:N{\g__list_level_int}
\tagstructend
\int_case:NTF{\g__list_level_int}{{0}{\openStructureIfNeed{true}}}{}
}
\renewcommand{\makelabel}[1]{\tagstructbegin{tag=Lbl}
\tagmcbegin{\tag=Lbl}
\make@label{##1}
\tagmcend
\tagstructend
}
}
\newenvironment{temp@env}{%
  \relax\ifmmode\@badmath\else$\fi%
 \collect@body\wrap}{%
\relax\ifmmode\ifinner$\else\@badmath\fi\else \@badmath\fi}
\protected\def\(#1\){\begin{temp@env}#1\end{temp@env}}
\makeatother

\newcommand{\auxiliaryspace}{~}

\makeatletter
\long\def\wrap#1{
\bool_if:NTF{\g__autotagging_bool}{
\str_case_e:nnTF{\prop_item:NV{\g__env_prop}{\g__env_str}}{
{true}
{\tagstructbegin{tag=P,actualtext-o=\detokenize\expandafter{#1}}
\tagmcbegin{tag=P}
 #1
 \tagmcend
\tagstructend}
{1}
{\tagstructbegin{tag=P,actualtext-o=\detokenize\expandafter{#1}}
 \tagmcbegin{tag=P}
 #1
 \tagmcend
\tagstructend}
}{}{\tagstructbegin{tag=Span,actualtext-o=\detokenize\expandafter{#1}}
\tagmcbegin{tag=Span}
#1
 \tagmcend
 \tagstructend
}
}
{\tagstructbegin{tag=P,actualtext-o=\detokenize\expandafter{#1}}
\tagmcbegin{tag=P}
 #1
 \tagmcend
\tagstructend}
}
\renewenvironment{equation}{%
 \incr@eqnum
  \mathdisplay@push
  \st@rredfalse \global\@eqnswtrue
 \mathdisplay{equation}%
  \collect@body\wrap\auxiliaryspace}{%
  \endmathdisplay{equation}%
  \mathdisplay@pop
  \ignorespacesafterend
}
\renewenvironment{equation*}{%
  \mathdisplay@push
  \st@rredtrue \global\@eqnswfalse
  \mathdisplay{equation*}%
  \collect@body\wrap\auxiliaryspace}{%
  \endmathdisplay{equation*}%
  \mathdisplay@pop
  \ignorespacesafterend
}
\protected\def\[#1\]{\begin{equation*}#1\end{equation*}}
\long\def\wrapml#1{
\def\@mltext{\detokenize\expandafter{#1}}
\def\@mltexttmp{}
\StrBehind[6]{\@mltext}{~}[\@mltexttmp]
\StrGobbleRight{\@mltexttmp}{1}[\@mltext]
\bool_if:NTF{\g__opened_par_bool}{\tagstructbegin{tag=Span,actualtext-o=\detokenize\expandafter{\@mltext}}
\tagmcbegin{tag=Span,}
#1}
{\tagstructbegin{tag=P,actualtext-o=\detokenize\expandafter{\@mltext}}
\tagmcbegin{tag=P}
#1}
}
%
% This one should be \wrapml parametrized \StrBehind[5]
%
\long\def\wrapmlstar#1{
\def\@mltext{\detokenize\expandafter{#1}}
\def\@mltexttmp{}
\StrBehind[5]{\@mltext}{~}[\@mltexttmp]
\StrGobbleRight{\@mltexttmp}{1}[\@mltext]
\bool_if:NTF{\g__opened_par_bool}{\tagstructbegin{tag=Span,,actualtext-o=\detokenize\expandafter{\@mltext}}
\tagmcbegin{tag=Span}
#1}{
\tagstructbegin{tag=P,actualtext-o=\detokenize\expandafter{\@mltext}}
\tagmcbegin{tag=P}
#1
}
}
%
% This one should be \wrapml parametrized = \wrapmlstar
%
\long\def\wrapmlalt#1{
\def\@mltext{\detokenize\expandafter{#1}}
\def\@mltexttmp{}
\StrBehind[5]{\@mltext}{~}[\@mltexttmp]
\StrGobbleRight{\@mltexttmp}{1}[\@mltext]
\bool_if:NTF{\g__opened_par_bool}{\tagstructbegin{tag=Span,actualtext-o=\detokenize\expandafter{\@mltext}}
\tagmcbegin{tag=Span}
#1}{\tagstructbegin{tag=P,actualtext-o=\detokenize\expandafter{\@mltext}}
\tagmcbegin{tag=P}
#1}
}

\renewenvironment{align}{%
  \collect@body\wrapml\auxiliaryspace
 \start@align\@ne\st@rredfalse\m@ne
}{%
  \math@cr \black@\totwidth@
  \egroup
  \@macronestedifalign
  \ignorespacesafterend
\CloseFormula
}

\renewenvironment{align*}{%
  \collect@body\wrapmlstar\auxiliaryspace
  \start@align\@ne\st@rredtrue\m@ne
}{%
  \endalign
}

\renewenvironment{alignat}{%
  \collect@body\wrapml\auxiliaryspace\auxiliaryspace
  \start@align\z@\st@rredfalse
}{%
  \endalign
}

\renewenvironment{alignat*}{%
  \collect@body\wrapmlstar\auxiliaryspace
  \start@align\z@\st@rredtrue
}{%
  \endalign
}

\renewenvironment{xalignat}{%
  \collect@body\wrapmlalt\auxiliaryspace
  \start@align\@ne\st@rredfalse
}{%
  \endalign
}

\renewenvironment{xalignat*}{%
  \collect@body\wrapmlstar\auxiliaryspace
  \start@align\@ne\st@rredtrue
}{%
  \endalign
}

\renewenvironment{xxalignat}{%
  \collect@body\wrapmlalt\auxiliaryspace
  \start@align\tw@\st@rredtrue
}{%
  \endalign
}

\renewenvironment{flalign}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\tw@\st@rredfalse\m@ne
}{%
  \endalign
}

\renewenvironment{flalign*}{%
  \collect@body\wrapmlstar\auxiliaryspace
  \start@align\tw@\st@rredtrue\m@ne
}{%
  \endalign
}

\renewenvironment{gather}{%
  \collect@body\wrapmlalt\auxiliaryspace\auxiliaryspace
  \start@gather\st@rredfalse
}{%
  \math@cr \black@\totwidth@ \egroup
  $$\ignorespacesafterend
  \CloseFormula
}
\renewenvironment{gather*}{%
  \collect@body\wrapmlstar\auxiliaryspace\auxiliaryspace
  \start@gather\st@rredtrue
}{%
  \endgather
}

\renewenvironment{multline}{%
  \collect@body\wrapmlalt\auxiliaryspace\auxiliaryspace
  \start@multline\st@rredfalse
}{%
%  \iftagsleft@ \@xp\lendmultline@ \else \@xp\rendmultline@ \fi
  \@macronestedifmultline
  \ignorespacesafterend
\CloseFormula
}
\renewenvironment{multline*}{
    \collect@body\wrapmlstar\auxiliaryspace\auxiliaryspace
    \start@multline\st@rredtrue
}{
  \endmultline
}

\makeatother
\ExplSyntaxOff
%%%%
% end of tagpdf option code
%%%%
\else
%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%
% accsupp option code (default)   %
%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%
%\def\messaggio{option accsupp} %debug

\RequirePackage{accsupp}
\RequirePackage{ifluatex}
%\RequirePackage{amsmath}
%\RequirePackage{amssymb}
%\RequirePackage{xstring}
\ifluatex  \pdfextension catalog{/Lang (en-US)}
  \RequirePackage{fontspec}
  \RequirePackage{luacode}
  \newfontface\zerowidthfont{freeserif}
\directlua{
require("axessibility.lua")
}
\else
\pdfcompresslevel=0
\pdfoptionpdfminorversion=6
\input{glyphtounicode}
\pdfgentounicode=1
\fi
\makeatletter

\newtoks\@mltext
\newtoks\@mltexttmp
\newcommand{\doreplacement}[1]{
\ifluatex
\directlua{
replace_dls_and_double_dls(#1)
}
\fi
}

\renewcommand*{\BeginAccSupp}[1]{%
  \begingroup
    \setkeys{ACCSUPP}{#1}%
    \edef\ACCSUPP@span{%
      /S/Span<<%
        \ifx\ACCSUPP@Lang\relax
        \else
          /Lang\ACCSUPP@Lang
        \fi
        \ifx\ACCSUPP@Alt\relax
        \else
          /Alt\ACCSUPP@Alt
        \fi
        \ifx\ACCSUPP@ActualText\relax
        \else
          /ActualText\ACCSUPP@ActualText
        \fi
        \ifx\ACCSUPP@E\relax
        \else
          /E\ACCSUPP@E
        \fi
      >>%
    }%
    \ACCSUPP@bdc
    \ACCSUPP@space
  \endgroup
}
\makeatother


\newcommand{\auxiliaryspace}{ }


\makeatletter
\long\def\wrap#1{
\BeginAccSupp{method=escape,ActualText=\detokenize\expandafter{#1}}
 #1
\EndAccSupp{}%
}
\makeatother

\makeatletter
\long\def\wrapml#1{
\def\@mltext{\detokenize\expandafter{#1}}
\def\@mltexttmp{}
\StrBehind[5]{\@mltext}{ }[\@mltexttmp]
\StrGobbleRight{\@mltexttmp}{1}[\@mltext]
%\mltext
%\StrBehind[2]{\@xp{\the\@mltext}}{ }[\@mltexttmp]
%\StrGobbleRight{\@xp{\the\@mltexttmp}}{1}[\@mltext]
%
\BeginAccSupp{method=escape,ActualText=\auxiliaryspace\@mltext}
 #1
\EndAccSupp{}%
}
\makeatother


\makeatletter
\renewenvironment{equation}{%
 \incr@eqnum
  \mathdisplay@push
  \st@rredfalse \global\@eqnswtrue
 \mathdisplay{equation}%
  \collect@body\wrap\auxiliaryspace}{%
  \endmathdisplay{equation}%
  \mathdisplay@pop
  \ignorespacesafterend
}
\makeatother


\makeatletter
\renewenvironment{equation*}{%
  \mathdisplay@push
  \st@rredtrue \global\@eqnswfalse
  \mathdisplay{equation*}%
  \collect@body\wrap\auxiliaryspace}{%
  \endmathdisplay{equation*}%
  \mathdisplay@pop
  \ignorespacesafterend
}
\makeatother


\makeatletter
\protected\def\[#1\]{\begin{equation*}#1\end{equation*}}
\makeatother

\makeatletter
\newenvironment{tempenv}{%
  \relax\ifmmode\@badmath\else$\fi%
 \collect@body\wrap}{%
  \relax\ifmmode\ifinner$\else\@badmath\fi\else \@badmath\fi}
\protected\def\(#1\){\begin{tempenv}#1\end{tempenv}}
\makeatother


\makeatletter

\renewenvironment{align}{%
  \collect@body\wrapml\auxiliaryspace
 \start@align\@ne\st@rredfalse\m@ne
}{%
  \math@cr \black@\totwidth@
  \egroup
  \@macronestedifalign
  \ignorespacesafterend
}

\renewenvironment{align*}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\@ne\st@rredtrue\m@ne
}{%
  \endalign
}

\renewenvironment{alignat}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\z@\st@rredfalse
}{%
  \endalign
}
\renewenvironment{alignat*}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\z@\st@rredtrue
}{%
  \endalign
}
\renewenvironment{xalignat}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\@ne\st@rredfalse
}{%
  \endalign
}
\renewenvironment{xalignat*}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\@ne\st@rredtrue
}{%
  \endalign
}
\renewenvironment{xxalignat}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\tw@\st@rredtrue
}{%
  \endalign
}
\renewenvironment{flalign}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\tw@\st@rredfalse\m@ne
}{%
  \endalign
}

\renewenvironment{flalign*}{%
  \collect@body\wrapml\auxiliaryspace
  \start@align\tw@\st@rredtrue\m@ne
}{%
  \endalign
}

\renewenvironment{gather}{%
  \collect@body\wrapml\auxiliaryspace\auxiliaryspace
  \start@gather\st@rredfalse
}{%
  \math@cr \black@\totwidth@ \egroup
  $$\ignorespacesafterend
}

\renewenvironment{gather*}{%
  \collect@body\wrapml\auxiliaryspace\auxiliaryspace
  \start@gather\st@rredtrue
}{%
  \endgather
}

\renewenvironment{multline}{%
  \collect@body\wrapml\auxiliaryspace\auxiliaryspace
  \start@multline\st@rredfalse
}{%
  %\iftagsleft@ \@xp\lendmultline@ \else \@xp\rendmultline@ \fi
  \@macronestedifmultline
  \ignorespacesafterend
}

\renewenvironment{multline*}{
  \collect@body\wrapml\auxiliaryspace\auxiliaryspace
  \start@multline\st@rredtrue
}{
  \endmultline
}

%%}
%%
\makeatother
%%%%
% end of accsupp option code
%%%%
\fi

\endinput
%%
%% End of file `axessibility.sty'.